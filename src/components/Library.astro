---
export interface Props {
  skipSave?: boolean;
}
---

<div id="library" data-preferences={JSON.stringify(Astro.props)}>
  <span id="heading"></span>
  <ul id="post-list"></ul>
</div>

<script>
  import { getPostCard, renderPost } from "../utils/library";
  import { cozify } from "../utils/sanitizer";
  const cache = await caches.open("cozy-reader");
  const baseUrl = window.location.origin;
  let url = new URL(window.location.href);
  // only cached unencoded url param
  const urlParam = url.searchParams.get("url");
  if (urlParam) {
    url = new URL(`${url.origin}/?url=${urlParam}`);
  }

  const preferencesEl = document.querySelector(
    "[data-preferences]"
  ) as HTMLElement;
  const preferencesStr = preferencesEl?.dataset.preferences ?? "";
  const { skipSave } = JSON.parse(preferencesStr);

  const routerOutlet = "router-outlet";
  const includesAppURL = urlParam?.includes(baseUrl) ?? false;

  try {
    if (
      url.href.slice(0, url.href.length - 1) !== baseUrl &&
      !skipSave &&
      !includesAppURL
    ) {
      console.info("adding one to cache", {
        context: "cozy-reader",
        data: url,
      });
      await cache.add(url);
    }
  } catch (error) {
    console.error("ERR", { context: "cozy-reader", data: error });
  }

  const cachedRequests = (await cache.keys()).filter((request) => {
    const urlObj = new URL(request.url);
    const urlParam = urlObj.searchParams.get("url");

    return (
      urlObj.search !== "" &&
      !urlParam?.startsWith(baseUrl) &&
      urlParam !== "" &&
      urlParam !== "null"
    );
  });

  if (cachedRequests?.length && routerOutlet !== null) {
    const list = document.querySelector("#post-list");
    const heading = document.querySelector(
      "#library span#heading"
    ) as HTMLHeadingElement;
    heading.innerHTML = "History";

    cachedRequests.reverse().forEach(async (request) => {
      const { url } = request;
      const link = document.createElement("a");

      let responseText;
      const fullResponse = await cache.match(url);
      if (
        !fullResponse &&
        url.slice(0, url.length - 1) !== baseUrl &&
        !skipSave &&
        !includesAppURL
      ) {
        console.info("updating cached", { context: "cozy-reader", data: url });
        await cache.add(url);
      }

      fullResponse?.text().then(async (data) => {
        responseText = data;
        const cleanedResponse = await cozify(responseText, baseUrl);
        const html = document.createElement("html");
        html.innerHTML = cleanedResponse;
        const title = html
          .querySelector('meta[property="cozy:title"]')
          ?.getAttribute("content");
        if (title === "Something is not right") {
          cache.delete(url);
          return; // temporary fix for deleting cached errors
        }
        const postCard = getPostCard(html);
        link.innerHTML = postCard;

        link.href = url;
        link.onclick = async (e) => {
          e.preventDefault();
          localStorage.setItem("scrollPosition", window.scrollY.toString());
          scrollTo(0, 0);
          console.info("using cached response", {
            context: "cozy-reader",
            data: url,
          });
          renderPost(cleanedResponse, url, routerOutlet);
        };
        const item = document.createElement("li");
        item.appendChild(link);
        list?.appendChild(item);
      });
    });

    window.addEventListener("popstate", async (data) => {
      let url = data.state?.url;
      let isHome = false;

      if (!url) {
        url = window.location.href;
        isHome = true;
      } else {
        // replace scrollPosition
        localStorage.setItem("scrollPosition", window.scrollY.toString());
      }

      const fullResponse = await cache.match(url);
      fullResponse?.text().then(async (data) => {
        const responseText = data;
        const cleanedResponse = await cozify(responseText, baseUrl);
        console.info("using cached response", {
          context: "cozy-reader",
          data: url,
        });
        renderPost(cleanedResponse, url, routerOutlet, true);
        if (isHome) {
          const scrollPosition = localStorage.getItem("scrollPosition");
          scrollTo(0, scrollPosition ? parseInt(scrollPosition) : 0);
        }
      });
    });
  }
</script>

<style>
  #library {
    span#heading {
      color: #555;
      font-size: small;
      text-transform: uppercase;
    }
  }
  #post-list {
    list-style: none;
    padding-left: 0;
    display: grid;
    gap: 1em;

    li {
      a {
        text-decoration: none;
        color: #000;

        h3 {
          text-decoration: underline;
        }

        .post-card {
          display: grid;
          grid-template-columns: calc(70px + 0.5em) auto;

          .post-card__image {
            img,
            svg {
              width: 70px;
              height: 70px;
              object-fit: cover;
              border-radius: 5px;
              border: 2px solid rgb(var(--gray));
              background-color: rgb(var(--gray));
              margin: 0.15rem 0;
            }
            svg {
              color: rgb(var(--gray-light));
              padding: 0.5em;
            }
          }

          .post-card__content {
            display: flex;
            flex-direction: column;
            justify-content: center;
            min-height: calc(70px + 0.5rem);
          }

          .post-card__title,
          .post-card__description {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
          }

          .post-card__meta,
          .post-card__description {
            font-size: smaller;
            color: #555;
          }

          .post-card__meta {
            display: flex;
            justify-content: space-between;
            margin-top: 0;

            * {
              flex: 1;
            }

            .post-card__source {
              font-weight: bold;
            }

            .post-card__published {
              text-align: right;
            }
          }
        }
      }
    }
  }
</style>
